What happens when you initialize a repository? Why do you need to do it?
Output:
RADHIKA reflections $ git init
Initialized empty Git repository in C:/Users/DELL PC/version-control/reflections/.git/
RADHIKA (master #) reflections $ git status
On branch master

Initial commit(<-- because no commits have been made earlier for it)

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        lesson_1_reflections.txt

nothing added to commit but untracked files present (use "git add" to track)

Each Git repository is tied to a specific directory - the directory where you ran git init. Only files from that directory (and subdirectories inside that directory) will be contained in that repository, and you can have different repositories in different directories.


How is the staging area different from the working directory and the repository?
staging area is like a sample space where we can temporarily keep our files until we are ready to make a commit.
What value do you think it offers?
the provision to remove a file from staging area can help us to prevent making unnecesary commits of files.


How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?